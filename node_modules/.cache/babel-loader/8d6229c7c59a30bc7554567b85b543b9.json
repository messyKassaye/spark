{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { get, removeToken, set } from \"../TokenService\";\nimport { API_AUTH_URL } from \"../constants/constants\";\n\nfunction Interceptor() {\n  const [errorInterceptor, setErrorInterceptor] = useState(undefined);\n  const [authInterceptor, setAuthInterceptor] = useState(undefined);\n\n  const addAuthInterceptor = () => {\n    const authInterceptor = axios.interceptors.request.use(config => {\n      if (!config.headers.hasOwnProperty('Authorization')) {\n        if (get()) {\n          config.headers.Authorization = `Bearer ${get()}`;\n        }\n      } else if (!config.headers.Authorization) {\n        delete config.headers.Authorization;\n      }\n\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n    setAuthInterceptor(authInterceptor);\n  };\n\n  const removeAuthInterceptor = () => {\n    axios.interceptors.request.eject(authInterceptor);\n    setAuthInterceptor(undefined);\n  };\n\n  const addErrorInterceptor = () => {\n    const errorInterceptor = axios.interceptors.response.use(response => {\n      return response;\n    }, error => {\n      if (error.response) {\n        const code = error.response.status;\n        let originalRequest = error.config;\n\n        if (code === 401) {\n          return issueToken().then(response => {\n            console.log(response);\n            removeToken();\n            set(response.data.token);\n            originalRequest['Authorization'] = 'Bearer ' + get();\n            return originalRequest;\n          });\n        } else {\n          let message = 'Something went wrong.';\n\n          if (code === 403) {\n            message = 'You’re not authorized to do that.';\n          } else if (error.message) {\n            message = error.message;\n          }\n\n          console.log(message); //actions.showNotifications({isShow: true,message:message})\n          //this.props.showNotifications()\n        }\n      }\n\n      return Promise.reject(error);\n    });\n    setErrorInterceptor(errorInterceptor);\n  };\n\n  const issueToken = () => {\n    return new Promise((resolve, reject) => {\n      return axios.post(`${API_AUTH_URL}refresh`).then(response => {\n        resolve(response);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  };\n\n  const removeErrorInterceptor = () => {\n    axios.interceptors.request.eject(errorInterceptor);\n    setErrorInterceptor(undefined);\n  };\n\n  useEffect(() => {\n    addAuthInterceptor();\n    addErrorInterceptor();\n    return () => {\n      removeAuthInterceptor();\n      removeErrorInterceptor();\n    };\n  }, []);\n  return null;\n}\n\nexport default Interceptor;","map":{"version":3,"sources":["D:/projects/spark/spark_front/src/interceptors/Interceptor.js"],"names":["useEffect","useState","axios","get","removeToken","set","API_AUTH_URL","Interceptor","errorInterceptor","setErrorInterceptor","undefined","authInterceptor","setAuthInterceptor","addAuthInterceptor","interceptors","request","use","config","headers","hasOwnProperty","Authorization","error","Promise","reject","removeAuthInterceptor","eject","addErrorInterceptor","response","code","status","originalRequest","issueToken","then","console","log","data","token","message","resolve","post","catch","err","removeErrorInterceptor"],"mappings":"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","sourcesContent":["import {useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {get, removeToken, set} from \"../TokenService\";\r\nimport {API_AUTH_URL} from \"../constants/constants\";\r\n\r\n\r\nfunction Interceptor() {\r\n    const [errorInterceptor, setErrorInterceptor] = useState(undefined)\r\n    const [authInterceptor, setAuthInterceptor] = useState(undefined)\r\n    const addAuthInterceptor = () => {\r\n        const authInterceptor = axios.interceptors.request.use(\r\n            config => {\r\n                if (!config.headers.hasOwnProperty('Authorization')) {\r\n                    if (get()) {\r\n                        config.headers.Authorization = `Bearer ${get()}`\r\n                    }\r\n                } else if (!config.headers.Authorization) {\r\n                    delete config.headers.Authorization\r\n                }\r\n                return config\r\n            },\r\n            error => {\r\n                return Promise.reject(error)\r\n            },\r\n        )\r\n        setAuthInterceptor(authInterceptor)\r\n    }\r\n\r\n    const removeAuthInterceptor = () => {\r\n        axios.interceptors.request.eject(authInterceptor)\r\n        setAuthInterceptor(undefined)\r\n    }\r\n\r\n    const addErrorInterceptor = () => {\r\n        const errorInterceptor = axios.interceptors.response.use(\r\n            response => {\r\n                return response\r\n            },\r\n            error => {\r\n                if (error.response) {\r\n                    const code = error.response.status\r\n                    let originalRequest = error.config;\r\n                    if (code === 401) {\r\n                            return issueToken().then((response) => {\r\n                                console.log(response)\r\n                                removeToken()\r\n                                set(response.data.token)\r\n                                originalRequest['Authorization'] = 'Bearer ' + get();\r\n                                return originalRequest;\r\n                            });\r\n                    } else {\r\n                        let message = 'Something went wrong.'\r\n                        if (code === 403) {\r\n                            message = 'You’re not authorized to do that.'\r\n                        } else if (error.message) {\r\n                            message = error.message\r\n                        }\r\n                        console.log(message)\r\n                        //actions.showNotifications({isShow: true,message:message})\r\n                        //this.props.showNotifications()\r\n                    }\r\n                }\r\n                return Promise.reject(error)\r\n            },\r\n        )\r\n        setErrorInterceptor(errorInterceptor)\r\n    }\r\n\r\n    const issueToken = ()=>{\r\n        return new Promise((resolve, reject) => {\r\n            return axios.post(`${API_AUTH_URL}refresh`).then((response) => {\r\n                resolve(response);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    const removeErrorInterceptor = () => {\r\n        axios.interceptors.request.eject(errorInterceptor)\r\n        setErrorInterceptor(undefined)\r\n    }\r\n\r\n    useEffect(() => {\r\n        addAuthInterceptor()\r\n        addErrorInterceptor()\r\n        return () => {\r\n            removeAuthInterceptor()\r\n            removeErrorInterceptor()\r\n        }\r\n    }, [])\r\n\r\n    return null\r\n}\r\n\r\nexport default Interceptor\r\n"]},"metadata":{},"sourceType":"module"}