{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { get, removeToken, set } from \"../TokenService\";\nimport { API_AUTH_URL } from \"../constants/constants\";\n\nfunction Interceptor() {\n  axios.defaults.headers.common['Token'] = get();\n  axios.defaults.headers.common['device'] = \"device\";\n  axios.interceptors.response.use(response => {\n    return response;\n  }, err => {\n    return new Promise((resolve, reject) => {\n      const originalReq = err.config;\n\n      if (err.response.status === 401 && err.config && !err.config.__isRetryRequest) {\n        originalReq._retry = true;\n        let res = fetch(`${API_AUTH_URL}refresh`, {\n          method: 'POST',\n          mode: 'cors',\n          cache: 'no-cache',\n          credentials: 'same-origin',\n          headers: {\n            'Content-Type': 'application/json',\n            'Device': 'device',\n            'Token': get()\n          },\n          redirect: 'follow',\n          referrer: 'no-referrer',\n          body: JSON.stringify({\n            token: localStorage.getItem(\"token\"),\n            refresh_token: localStorage.getItem(\"refresh_token\")\n          })\n        }).then(res => res.json()).then(res => {\n          console.log(res);\n          set(res.token); //this.setSession({token: res.token, refresh_token: res.refresh});\n\n          originalReq.headers['Token'] = res.token;\n          originalReq.headers['Device'] = \"device\";\n          return axios(originalReq);\n        });\n        resolve(res);\n      }\n\n      return Promise.reject(err);\n    });\n  });\n}\n\nexport default Interceptor;","map":{"version":3,"sources":["D:/projects/spark/spark_front/src/interceptors/Interceptor.js"],"names":["useEffect","useState","axios","get","removeToken","set","API_AUTH_URL","Interceptor","defaults","headers","common","interceptors","response","use","err","Promise","resolve","reject","originalReq","config","status","__isRetryRequest","_retry","res","fetch","method","mode","cache","credentials","redirect","referrer","body","JSON","stringify","token","localStorage","getItem","refresh_token","then","json","console","log"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,WAAb,EAA0BC,GAA1B,QAAoC,iBAApC;AACA,SAAQC,YAAR,QAA2B,wBAA3B;;AAGA,SAASC,WAAT,GAAuB;AACnBL,EAAAA,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,OAA9B,IAAyCP,GAAG,EAA5C;AACAD,EAAAA,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,QAA9B,IAAyC,QAAzC;AACAR,EAAAA,KAAK,CAACS,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgCD,QAAQ,IAAI;AACxC,WAAOA,QAAP;AACH,GAFD,EAEGE,GAAG,IAAI;AACN,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,YAAMC,WAAW,GAAGJ,GAAG,CAACK,MAAxB;;AACA,UAAKL,GAAG,CAACF,QAAJ,CAAaQ,MAAb,KAAwB,GAAxB,IAA+BN,GAAG,CAACK,MAAnC,IAA6C,CAACL,GAAG,CAACK,MAAJ,CAAWE,gBAA9D,EACA;AACIH,QAAAA,WAAW,CAACI,MAAZ,GAAqB,IAArB;AAEA,YAAIC,GAAG,GAAGC,KAAK,CAAE,GAAElB,YAAa,SAAjB,EAA2B;AACtCmB,UAAAA,MAAM,EAAE,MAD8B;AAEtCC,UAAAA,IAAI,EAAE,MAFgC;AAGtCC,UAAAA,KAAK,EAAE,UAH+B;AAItCC,UAAAA,WAAW,EAAE,aAJyB;AAKtCnB,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAEL,sBAAU,QAFL;AAGL,qBAASN,GAAG;AAHP,WAL6B;AAUtC0B,UAAAA,QAAQ,EAAE,QAV4B;AAWtCC,UAAAA,QAAQ,EAAE,aAX4B;AAYtCC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,YAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADU;AAEjBC,YAAAA,aAAa,EAAEF,YAAY,CAACC,OAAb,CAAqB,eAArB;AAFE,WAAf;AAZgC,SAA3B,CAAL,CAgBPE,IAhBO,CAgBFf,GAAG,IAAIA,GAAG,CAACgB,IAAJ,EAhBL,EAgBiBD,IAhBjB,CAgBsBf,GAAG,IAAI;AACnCiB,UAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACAlB,UAAAA,GAAG,CAACkB,GAAG,CAACW,KAAL,CAAH,CAFmC,CAGnC;;AACAhB,UAAAA,WAAW,CAACT,OAAZ,CAAoB,OAApB,IAA+Bc,GAAG,CAACW,KAAnC;AACAhB,UAAAA,WAAW,CAACT,OAAZ,CAAoB,QAApB,IAAgC,QAAhC;AAGA,iBAAOP,KAAK,CAACgB,WAAD,CAAZ;AACH,SAzBS,CAAV;AA4BAF,QAAAA,OAAO,CAACO,GAAD,CAAP;AACH;;AAGD,aAAOR,OAAO,CAACE,MAAR,CAAeH,GAAf,CAAP;AACH,KAvCM,CAAP;AAwCH,GA3CD;AA4CH;;AAED,eAAeP,WAAf","sourcesContent":["import {useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {get, removeToken, set} from \"../TokenService\";\r\nimport {API_AUTH_URL} from \"../constants/constants\";\r\n\r\n\r\nfunction Interceptor() {\r\n    axios.defaults.headers.common['Token'] = get()\r\n    axios.defaults.headers.common['device'] =\"device\"\r\n    axios.interceptors.response.use(response => {\r\n        return response;\r\n    }, err => {\r\n        return new Promise((resolve, reject) => {\r\n            const originalReq = err.config;\r\n            if ( err.response.status === 401 && err.config && !err.config.__isRetryRequest )\r\n            {\r\n                originalReq._retry = true;\r\n\r\n                let res = fetch(`${API_AUTH_URL}refresh`, {\r\n                    method: 'POST',\r\n                    mode: 'cors',\r\n                    cache: 'no-cache',\r\n                    credentials: 'same-origin',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Device': 'device',\r\n                        'Token': get()\r\n                    },\r\n                    redirect: 'follow',\r\n                    referrer: 'no-referrer',\r\n                    body: JSON.stringify({\r\n                        token: localStorage.getItem(\"token\"),\r\n                        refresh_token: localStorage.getItem(\"refresh_token\")\r\n                    }),\r\n                }).then(res => res.json()).then(res => {\r\n                    console.log(res);\r\n                    set(res.token)\r\n                    //this.setSession({token: res.token, refresh_token: res.refresh});\r\n                    originalReq.headers['Token'] = res.token;\r\n                    originalReq.headers['Device'] = \"device\";\r\n\r\n\r\n                    return axios(originalReq);\r\n                });\r\n\r\n\r\n                resolve(res);\r\n            }\r\n\r\n\r\n            return Promise.reject(err);\r\n        });\r\n    });\r\n}\r\n\r\nexport default Interceptor\r\n"]},"metadata":{},"sourceType":"module"}