{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\spark\\\\spark_front\\\\src\\\\authentication\\\\users\\\\widgets\\\\ChatRoom.js\";\nimport { AppBar, Avatar, Card, CardActions, CardContent, CardHeader, CssBaseline, Divider, Grid, Hidden, IconButton, Input, SwipeableDrawer, Toolbar, Typography } from '@material-ui/core';\nimport { Close, Send } from '@material-ui/icons';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { me } from '../../state/actions/usersActions';\nimport Pusher from 'pusher-js';\nimport DrawerProfile from './DrawerProfile';\nimport theme from \"../../../themes/app_theme\";\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport authStyle from '../styles/auth_style';\nimport ChatUsersList from './ChatUsersList';\nimport ChatProfile from './ChatProfile';\nimport { showUser } from '../../state/actions/usersActions';\nimport HorizontalLoading from '../loader/HorizontalLoading';\nimport { Link } from 'react-router-dom';\nimport { isInteger } from 'lodash';\n\nclass ChatBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerToggle = (value, page) => event => {\n      if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n        return;\n      }\n\n      this.setState({\n        mobileOpen: value,\n        currentPage: page\n      });\n    };\n\n    this.checkInfo = () => {};\n\n    this.showDialog = component => {\n      this.props.showMainDialog({\n        show: true,\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'flex-start',\n          top: -550\n        },\n        maxWidth: 'sm',\n        page: component,\n        title: `Spark`,\n        actions: {\n          on: false,\n          path: '',\n          id: ''\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.me();\n    let id = this.props.match.params.id;\n    this.props.showUser(id);\n  }\n  /*componentDidUpdate(){\r\n      let id = this.props.match.params.id\r\n      this.props.showUser(id)\r\n  }*/\n\n\n  render() {\n    const {\n      container\n    } = this.props;\n    const {\n      classes\n    } = this.props;\n    const drawer = /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.drawerRoot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppBar, {\n      style: {\n        position: \"relative\"\n      },\n      color: 'primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      style: {\n        padding: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DrawerProfile, {\n      showBack: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(ChatUsersList, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CssBaseline, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"nav\", {\n      className: classes.drawer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Hidden, {\n      smUp: true,\n      implementation: \"css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(SwipeableDrawer, {\n      container: container,\n      variant: \"temporary\",\n      anchor: theme.direction === 'rtl' ? 'right' : 'left',\n      open: this.state.mobileOpen,\n      onOpen: this.handleDrawerToggle(true, this.state.currentPage),\n      onClose: this.handleDrawerToggle(false, this.state.currentPage),\n      classes: {\n        paper: classes.drawerPaper\n      },\n      ModalProps: {\n        keepMounted: true // Better open performance on mobile.\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, drawer)), /*#__PURE__*/React.createElement(Hidden, {\n      xsDown: true,\n      implementation: \"css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(SwipeableDrawer, {\n      classes: {\n        paper: classes.drawerPaper\n      },\n      variant: \"permanent\",\n      open: this.state.mobileOpen,\n      onOpen: this.handleDrawerToggle(true, this.state.currentPage),\n      onClose: this.handleDrawerToggle(false, this.state.currentPage),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, drawer))), /*#__PURE__*/React.createElement(\"main\", {\n      style: {\n        flexGrow: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  user: state.userData.user,\n  loading: state.userData.loading,\n  chatUser: state.userData.chatUser,\n  chatLoading: state.userData.chatLoading\n});\n\nexport default withStyles(authStyle)(connect(mapStateToProps, {\n  me,\n  showUser\n})(ChatBoard));","map":{"version":3,"sources":["D:/projects/spark/spark_front/src/authentication/users/widgets/ChatRoom.js"],"names":["AppBar","Avatar","Card","CardActions","CardContent","CardHeader","CssBaseline","Divider","Grid","Hidden","IconButton","Input","SwipeableDrawer","Toolbar","Typography","Close","Send","React","connect","me","Pusher","DrawerProfile","theme","withStyles","authStyle","ChatUsersList","ChatProfile","showUser","HorizontalLoading","Link","isInteger","ChatBoard","Component","constructor","props","handleDrawerToggle","value","page","event","type","key","setState","mobileOpen","currentPage","checkInfo","showDialog","component","showMainDialog","show","style","display","flexDirection","justifyContent","top","maxWidth","title","actions","on","path","id","componentDidMount","match","params","render","container","classes","drawer","drawerRoot","position","padding","root","direction","state","paper","drawerPaper","keepMounted","flexGrow","mapStateToProps","user","userData","loading","chatUser","chatLoading"],"mappings":"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","sourcesContent":["import { AppBar, Avatar, Card, CardActions, CardContent, CardHeader, CssBaseline, Divider, Grid, Hidden, IconButton, Input, SwipeableDrawer, Toolbar, Typography } from '@material-ui/core'\r\nimport { Close, Send } from '@material-ui/icons'\r\nimport React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {me} from '../../state/actions/usersActions'\r\nimport Pusher from 'pusher-js'\r\nimport DrawerProfile from './DrawerProfile'\r\nimport theme from \"../../../themes/app_theme\";\r\nimport withStyles from '@material-ui/core/styles/withStyles'\r\nimport authStyle from '../styles/auth_style'\r\nimport ChatUsersList from './ChatUsersList'\r\nimport ChatProfile from './ChatProfile'\r\nimport {showUser} from '../../state/actions/usersActions'\r\nimport HorizontalLoading from '../loader/HorizontalLoading'\r\nimport { Link } from 'react-router-dom'\r\nimport { isInteger } from 'lodash'\r\nclass ChatBoard extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    }\r\n    \r\n\r\n    componentDidMount(){\r\n        this.props.me()\r\n        let id = this.props.match.params.id\r\n        this.props.showUser(id)\r\n    }\r\n\r\n   \r\n    /*componentDidUpdate(){\r\n        let id = this.props.match.params.id\r\n        this.props.showUser(id)\r\n    }*/\r\n\r\n    handleDrawerToggle = (value,page) => event=>{\r\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            mobileOpen: value,\r\n            currentPage:page\r\n        })\r\n    }\r\n\r\n    checkInfo = ()=>{\r\n       \r\n    }\r\n\r\n    showDialog = (component)=>{\r\n        this.props.showMainDialog({\r\n            show:true,\r\n            style:{display:'flex',flexDirection:'row',justifyContent:'flex-start',top:-550},\r\n            maxWidth:'sm',\r\n            page:component,\r\n            title:`Spark`,\r\n            actions:{\r\n                on:false,\r\n                path:'',\r\n                id:''\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {container} = this.props;\r\n        const {classes} = this.props;\r\n        const drawer = (\r\n            <div className={classes.drawerRoot}>\r\n                <AppBar style={{position: \"relative\"}} color={'primary'}>\r\n                    <Toolbar style={{padding: 5}}>\r\n                        <DrawerProfile showBack={true}/>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <ChatUsersList/>\r\n            </div>\r\n        )\r\n        return (\r\n            <div className={classes.root}>\r\n                <CssBaseline/>\r\n                <nav className={classes.drawer}>\r\n                    {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n                    <Hidden smUp implementation=\"css\">\r\n                        <SwipeableDrawer\r\n                            container={container}\r\n                            variant=\"temporary\"\r\n                            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                            open={this.state.mobileOpen}\r\n\r\n                            onOpen={this.handleDrawerToggle(true,this.state.currentPage)}\r\n                            onClose={this.handleDrawerToggle(false,this.state.currentPage)}\r\n                            classes={{\r\n                                paper: classes.drawerPaper,\r\n                            }}\r\n                            ModalProps={{\r\n                                keepMounted: true, // Better open performance on mobile.\r\n                            }}\r\n                        >\r\n                            {drawer}\r\n                        </SwipeableDrawer>\r\n                    </Hidden>\r\n                    <Hidden xsDown implementation=\"css\">\r\n                        <SwipeableDrawer\r\n                            classes={{\r\n                                paper: classes.drawerPaper,\r\n                            }}\r\n                            variant=\"permanent\"\r\n                            open={this.state.mobileOpen}\r\n                            onOpen={this.handleDrawerToggle(true,this.state.currentPage)}\r\n                            onClose={this.handleDrawerToggle(false,this.state.currentPage)}\r\n                        >\r\n                            {drawer}\r\n                        </SwipeableDrawer>\r\n                    </Hidden>\r\n                </nav>\r\n                <main style={{flexGrow:1}}>\r\n                    {/* <div style={{height:'100vh'}}>\r\n                    {\r\n                        this.props.chatLoading\r\n                        ?\r\n                            (\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item md={9} xs={12} sm={12}>\r\n                                           <HorizontalLoading/>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={3}>\r\n                                        <HorizontalLoading/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            )\r\n                        :\r\n                            (\r\n                                <Grid container>\r\n                                    {this.initiatChat()}\r\n                                    <Grid item md={8} xs={12} sm={12}>\r\n                                           <Card style={{height:'100vh'}}>\r\n                                               <CardHeader\r\n                                                title={\r\n                                                    <Typography variant={'h6'}>\r\n                                                        {`Your are matched with ${this.props.chatUser.attribute.name}`}\r\n                                                    </Typography>\r\n                                                }\r\n                                                avatar={\r\n                                                    <Avatar src={this.props.chatUser.attribute.profile_pic_path}/>\r\n                                                }\r\n                                                action={\r\n                                                    <IconButton component={Link} to={'/auth'}>\r\n                                                        <Close/>\r\n                                                    </IconButton>\r\n                                                }\r\n                                               />\r\n                                               <Divider/>\r\n                                               <CardContent>\r\n                                                {\r\n                                                    this.state.chats.map(\r\n                                                        chats=>(\r\n                                                            <Typography>\r\n                                                                {`Hi: ${chats.id}`}\r\n                                                            </Typography>\r\n                                                        )\r\n                                                    )\r\n                                                }\r\n                                               </CardContent>\r\n                                               <CardActions style={{width:'100%',top:'75%',position:'relative'}}>\r\n                                                        <div style={{display:'flex',flexDirection:'row',width:'100%'}}>\r\n                                                            <Input\r\n                                                             placeholder={'Write your message...'}\r\n                                                             style={{width:'90%'}}\r\n                                                            />\r\n                                                            <IconButton color={'primary'}>\r\n                                                                <Send/>\r\n                                                            </IconButton>\r\n                                                       </div>\r\n                                               </CardActions>\r\n                                           </Card>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={4}>\r\n                                        <ChatProfile user={this.props.chatUser}/>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            )\r\n                    }\r\n                    </div> */}\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state=>({\r\n    user:state.userData.user,\r\n    loading:state.userData.loading,\r\n    chatUser:state.userData.chatUser,\r\n    chatLoading:state.userData.chatLoading\r\n})\r\n\r\nexport default withStyles(authStyle)(connect(mapStateToProps,{me,showUser})(ChatBoard))"]},"metadata":{},"sourceType":"module"}