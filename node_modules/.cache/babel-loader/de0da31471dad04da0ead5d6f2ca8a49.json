{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\spark\\\\spark_front\\\\src\\\\home\\\\dialogs\\\\CreateAccountAndLogin.js\";\nimport { AppBar, Card, CardContent, CardHeader, Container, Divider, InputAdornment, TextField, Toolbar } from '@material-ui/core';\nimport React from 'react';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport createAccountStyle from './styles/createAccountStyle';\nimport LoadingButton from '../../authentication/commons/LoadingButton';\nimport axios from 'axios';\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator';\nimport { AccountCircle, PhoneAndroidRounded, PhoneCallback, PhoneCallbackSharp, PhoneCallbackTwoTone } from '@material-ui/icons';\nimport { API_AUTH_URL } from '../../constants/constants';\nimport { set, setData } from '../../TokenService';\nimport { connect } from 'react-redux';\nimport { showMainDialog } from '../../authentication/commons/state/actions/dialogActions';\nimport LogoComponent from '../../authentication/commons/LogoComponent';\nimport { withRouter } from 'react-router-dom';\n\nclass CreateAccountAndLogin extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      const {\n        formData\n      } = this.state;\n      formData[event.target.name] = event.target.value;\n      this.setState(formData);\n    };\n\n    this.closeDialog = () => {\n      this.props.showMainDialog({\n        show: false,\n        maxWidth: 'sm',\n        page: null,\n        title: ``,\n        actions: {\n          on: false,\n          path: '',\n          id: ''\n        }\n      });\n    };\n\n    this.handleSubmit = event => {\n      this.setState({\n        submitted: true,\n        loading: true\n      });\n      const {\n        formData\n      } = this.state;\n      axios.post(`${API_AUTH_URL}login`, formData, {\n        headers: {\n          'content-type': 'Application/json'\n        },\n        timeout: 1000 * 5\n      }).then(res => res.data).then(response => {\n        set(response.token);\n        this.props.history.push('/auth');\n        window.location.reload();\n      }).catch(onerror => {\n        if (!onerror.response) {\n          this.setState({\n            errorMessage: 'networkError'\n          });\n          this.setState({\n            loading: false,\n            finished: false,\n            submitted: false\n          });\n        } else {\n          let code = onerror.response.status;\n\n          if (code === 403) {\n            setData(formData);\n            this.props.history.push('/auth');\n            window.location.reload();\n          }\n\n          this.setState({\n            loading: false,\n            finished: false,\n            submitted: false\n          });\n        }\n      });\n    };\n\n    this.state = {\n      formData: {\n        email: '',\n        password: '',\n        phone: ''\n      },\n      submitted: false,\n      loading: false,\n      finished: false,\n      errorMessage: ''\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      formData\n    } = this.state;\n    const {\n      loading\n    } = this.state;\n    const {\n      finished\n    } = this.state;\n    const setLoading = !finished && loading;\n    const isEnabled = formData.email.length > 0 && formData.password.length > 0;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(AppBar, {\n      className: classes.appBar,\n      elevation: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      maxWidth: 'lg',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(LogoComponent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      elevation: 0,\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ValidatorForm, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TextValidator, {\n      className: classes.text_input,\n      label: 'Email',\n      onChange: this.handleChange,\n      name: \"email\",\n      type: \"email\",\n      value: this.state.formData.email,\n      validators: ['required', 'isEmail'],\n      errorMessages: ['Please enter your email', 'is not valid email'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(TextValidator, {\n      className: classes.text_input,\n      label: 'Password',\n      onChange: this.handleChange,\n      name: \"password\",\n      type: \"password\",\n      value: this.state.formData.password,\n      validators: ['required'],\n      errorMessages: ['Please enter your password'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(LoadingButton, {\n      className: classes.text_input,\n      color: \"primary\",\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: !isEnabled || this.state.submitted,\n      loading: setLoading,\n      text: 'Login',\n      done: finished,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, 'Login')), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.otherWay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Divider, {\n      className: classes.divider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 25\n      }\n    }, \"Or\"), /*#__PURE__*/React.createElement(Divider, {\n      className: classes.divider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(TextField, {\n      className: classes.phone,\n      label: \"Login via phone number\",\n      InputProps: {\n        startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(PhoneCallbackSharp, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }\n        }))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    })))));\n  }\n\n}\n\nexport default withStyles(createAccountStyle)(CreateAccountAndLogin);","map":{"version":3,"sources":["D:/projects/spark/spark_front/src/home/dialogs/CreateAccountAndLogin.js"],"names":["AppBar","Card","CardContent","CardHeader","Container","Divider","InputAdornment","TextField","Toolbar","React","withStyles","createAccountStyle","LoadingButton","axios","TextValidator","ValidatorForm","AccountCircle","PhoneAndroidRounded","PhoneCallback","PhoneCallbackSharp","PhoneCallbackTwoTone","API_AUTH_URL","set","setData","connect","showMainDialog","LogoComponent","withRouter","CreateAccountAndLogin","Component","constructor","props","handleChange","event","formData","state","target","name","value","setState","closeDialog","show","maxWidth","page","title","actions","on","path","id","handleSubmit","submitted","loading","post","headers","timeout","then","res","data","response","token","history","push","window","location","reload","catch","onerror","errorMessage","finished","code","status","email","password","phone","render","classes","setLoading","isEnabled","length","container","appBar","display","flexDirection","alignItems","card","text_input","otherWay","divider","label","startAdornment"],"mappings":"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","sourcesContent":["import { AppBar, Card, CardContent, CardHeader, Container, Divider, InputAdornment, TextField, Toolbar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport withStyles from '@material-ui/core/styles/withStyles'\r\nimport createAccountStyle from './styles/createAccountStyle'\r\nimport LoadingButton from '../../authentication/commons/LoadingButton'\r\nimport axios from 'axios'\r\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { AccountCircle, PhoneAndroidRounded, PhoneCallback, PhoneCallbackSharp, PhoneCallbackTwoTone } from '@material-ui/icons'\r\nimport { API_AUTH_URL } from '../../constants/constants'\r\nimport { set, setData } from '../../TokenService'\r\nimport {connect} from 'react-redux'\r\nimport {showMainDialog} from '../../authentication/commons/state/actions/dialogActions'\r\nimport LogoComponent from '../../authentication/commons/LogoComponent'\r\nimport { withRouter } from 'react-router-dom'\r\nclass CreateAccountAndLogin extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            formData:{\r\n                email:'',\r\n                password:'',\r\n                phone:''\r\n            },\r\n            submitted: false,\r\n            loading: false,\r\n            finished: false,\r\n            errorMessage: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (event)=>{\r\n        const {formData} = this.state\r\n        formData[event.target.name] = event.target.value\r\n        this.setState(formData)\r\n    }\r\n\r\n    closeDialog = ()=>{\r\n        this.props.showMainDialog({\r\n            show:false,\r\n            maxWidth:'sm',\r\n            page:null,\r\n            title:``,\r\n            actions:{\r\n                on:false,\r\n                path:'',\r\n                id:''\r\n            }\r\n        })\r\n    }\r\n\r\n    handleSubmit = (event)=>{\r\n        this.setState({\r\n            submitted: true,\r\n            loading: true\r\n        })\r\n\r\n        const {formData} =this.state\r\n\r\n        axios.post(`${API_AUTH_URL}login`, formData, {\r\n            headers: {\r\n                'content-type': 'Application/json'\r\n            },\r\n            timeout:1000*5,\r\n        })\r\n            .then((res) => res.data)\r\n            .then((response) => {\r\n                set(response.token)\r\n                this.props.history.push('/auth')\r\n                window.location.reload()\r\n            })\r\n            .catch(onerror=>{\r\n                if(!onerror.response){\r\n                    this.setState({errorMessage:'networkError'})\r\n                    this.setState({\r\n                        loading: false,\r\n                        finished: false,\r\n                        submitted: false,\r\n                    })\r\n                }else {\r\n                    let code = onerror.response.status\r\n                    if(code===403){\r\n                        setData(formData)\r\n                        this.props.history.push('/auth')\r\n                        window.location.reload()\r\n                    }\r\n                    this.setState({\r\n                        loading: false,\r\n                        finished: false,\r\n                        submitted: false,\r\n                    })\r\n                }\r\n\r\n            })\r\n    }\r\n    \r\n  \r\n    render() {\r\n        const {classes} = this.props\r\n        const {formData} = this.state\r\n        const {loading} = this.state;\r\n        const {finished} = this.state\r\n        const setLoading = !finished && loading;\r\n        const isEnabled = formData.email.length > 0 && formData.password.length > 0\r\n        return (\r\n            <div className={classes.container}>\r\n                <AppBar className={classes.appBar} elevation={0} >\r\n                    <Toolbar>\r\n                        <Container maxWidth={'lg'}>\r\n                        <LogoComponent/>\r\n                        </Container>\r\n                    </Toolbar>\r\n                    <Divider/>\r\n                </AppBar>\r\n\r\n                <div style={{display:'flex',flexDirection:'column',alignItems:'center'}}>\r\n                <Card elevation={0} className={classes.card}>\r\n                <CardContent>\r\n                    <ValidatorForm onSubmit={this.handleSubmit}>\r\n                    <TextValidator\r\n                        className={classes.text_input}\r\n                        label={'Email'}\r\n                        onChange={this.handleChange}\r\n                        name=\"email\"\r\n                        type='email'\r\n                        value={this.state.formData.email}\r\n                        validators={['required', 'isEmail']}\r\n                        errorMessages={['Please enter your email', 'is not valid email']}\r\n\r\n                    />\r\n\r\n                    <TextValidator\r\n                        className={classes.text_input}\r\n                        label={'Password'}\r\n                        onChange={this.handleChange}\r\n                        name=\"password\"\r\n                        type='password'\r\n                        value={this.state.formData.password}\r\n                        validators={['required']}\r\n                        errorMessages={['Please enter your password']}\r\n\r\n                    />\r\n                    <LoadingButton\r\n                    className={classes.text_input}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    type=\"submit\"\r\n                    disabled={!isEnabled || this.state.submitted}\r\n                    loading={setLoading}\r\n                    text={'Login'}\r\n                    done={finished}\r\n                    >\r\n                    {\r\n                        'Login'\r\n                    }\r\n                    </LoadingButton>\r\n                    </ValidatorForm>\r\n\r\n                    <div className={classes.otherWay}>\r\n                        <Divider className={classes.divider}/> \r\n                        <span className={classes.label}>Or</span>\r\n                        <Divider className={classes.divider}/>\r\n                    </div>\r\n                    <TextField\r\n                    className={classes.phone}\r\n                    label=\"Login via phone number\"\r\n                    InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                        <PhoneCallbackSharp />\r\n                        </InputAdornment>\r\n                    ),\r\n                    }}\r\n                />\r\n                </CardContent>\r\n            </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(createAccountStyle)(CreateAccountAndLogin)"]},"metadata":{},"sourceType":"module"}